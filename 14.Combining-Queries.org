* Lesson 14. Combining Queries

In this lesson, you'll learn how to use the UNION operator to combine multiple SELECT statements into one result set.

** Understanding Combined Queries

Most SQL queries contain a single SELECT statement that returns data from one or more tables. SQL also enables you to perform multiple queries (multiple SELECT statements) and return the results as a single query result set. These combined queries are usually known as unions or compound queries.

There are basically two scenarios in which you'd use combined queries:

- To return similarly structured data from different tables in a single query
- To perform multiple queries against a single table returning the data as one query

#+BEGIN_QUOTE
  *Tip: Combining Queries and Multiple WHERE Conditions*

  For the most part, combining two queries to the same table accomplishes the same thing as a single query with multiple WHERE clause conditions. In other words, any SELECT statement with multiple WHERE clauses can also be specified as a combined query, as you'll see in the section that follows.
#+END_QUOTE

** Creating Combined Queries

SQL queries are combined using the UNION operator. Using UNION, multiple SELECT statements can be specified, and their results can be combined into a single result set.

*** Using UNION

Using UNION is simple enough. All you do is specify each SELECT statement and place the keyword UNION between each.

Let's look at an example. You need a report on all your customers in Illinois, Indiana, and Michigan. You also want to include all Fun4All locations, regardless of state. Of course, you can create a WHERE clause that will do this, but this time you'll use a UNION instead.

As I just explained, creating a UNION involves writing multiple SELECT statements.

#+BEGIN_SRC sql :engine mysql :dbuser org :database grocer
select cust_name, cust_contact, cust_state, cust_email
from Customers
where cust_state in ("il", "in", "mi")
union
select cust_name, cust_contact, ucust_state,  cust_email
from Customers
where cust_name = "Fun4All";
#+END_SRC

#+RESULTS:
| cust_name     | cust_contact       | cust_state | cust_email            |
|---------------+--------------------+------------+-----------------------|
| Village Toys  | John Smith         | MI         | sales@villagetoys.com |
| Fun4All       | Jim Jones          | IN         | jjones@fun4all.com    |
| The Toy Store | Kim Howard         | IL         | NULL                  |
| Fun4All       | Denise L. Stephens | AZ         | dstephens@fun4all.com |

The preceding statements are made up of both of the previous SELECT statements separated by the UNION keyword. UNION instructs the DBMS to execute both SELECT statements and combine the output into a single query result set.

As a point of reference, here is the same query using multiple WHERE clauses instead of a UNION:

#+BEGIN_SRC sql :engine mysql :dbuser org :database grocer
select cust_name, cust_contact, cust_email
from customers
where cust_state in ("il", "in", "mi")
or cust_name = "fun4all";
#+END_SRC

In our simple example, the UNION might actually be more complicated than using a WHERE clause. But with more complex filtering conditions, or if the data is being retrieved from multiple tables (and not just a single table), the UNION could have made the process much simpler indeed.

#+BEGIN_QUOTE
  *Tip: UNION Limits*

  There is no standard SQL limit to the number of SELECT statements that can be combined with UNION statements. However, it is best to consult your DBMS documentation to *ensure* that it does not enforce any maximum statement restrictions of its own
#+END_QUOTE

#+BEGIN_QUOTE
  *Caution: Performance Issues*

  Most good DBMSs use an internal query *optimizer* to combine the SELECT statements before they are even processed. In theory, this means that from a performance perspective, there should be no real difference between using multiple WHERE clause conditions or a UNION. I say in theory, because, in practice, most query optimizers don't always do as good a job as they should. Your best bet is to test both methods to see which will work best for you.
#+END_QUOTE

*** UNION Rules

As you can see, unions are very easy to use. But there are a few rules governing exactly which can be combined:

1) A UNION must be composed of two or more SELECT statements, each separated by the keyword UNION (so, if combining four SELECT statements there would be three UNION keywords used).
2) Each query in a UNION must contain the same columns, expressions, or aggregate functions (and some DBMSs even require that columns be listed in the same order).
3) Column datatypes must be compatible: They need not be the exact same type, but they must be of a type that the DBMS can implicitly convert (for example, different numeric types or different date types).

Aside from these basic rules and restrictions, unions can be used for any data retrieval tasks.

*** Including or Eliminating Duplicate Rows

Go back to the preceding section titled "Using UNION" and look at the sample SELECT statements used. You'll notice that when executed individually, the first SELECT statement returns three rows, and the second SELECT statement returns two rows. However, when the two SELECT statements are combined with a UNION, only four rows are returned, not five.

The UNION automatically removes any duplicate rows from the query result set (in other words, it behaves just as do multiple WHERE clause conditions in a single SELECT would). Because there is a Fun4All location in Indiana, that row was returned by both SELECT statements. When the UNION was used the duplicate row was eliminated.

This is the default behavior of UNION, but you can change this if you so desire. If you would, in fact, want all occurrences of all matches returned, you can use UNION ALL instead of UNION.

Look at the following example:
# duplicates
#+BEGIN_SRC sql :engine mysql :dbuser org :database grocer
select cust_name, cust_contact, cust_email from Customers
where cust_state  in ("il", "in", "mi")
union all
select cust_name, cust_contact, cust_email
from Customers
where cust_name = "fun4all";
#+END_SRC

#+RESULTS:
| cust_name     | cust_contact       | cust_email            |
|---------------+--------------------+-----------------------|
| Village Toys  | John Smith         | sales@villagetoys.com |
| Fun4All       | Jim Jones          | jjones@fun4all.com    |
| The Toy Store | Kim Howard         | NULL                  |
| Fun4All       | Jim Jones          | jjones@fun4all.com    |
| Fun4All       | Denise L. Stephens | dstephens@fun4all.com |

Using UNION ALL, the DBMS does not eliminate duplicates. Therefore, the preceding example returns five rows, one of them occurring twice.

#+BEGIN_QUOTE
  *Tip: UNION versus WHERE*

  AT the beginning of this lesson, I said that UNION almost always accomplishes the same thing as multiple WHERE conditions. UNION ALL is the form of UNION that accomplishes what cannot be done with WHERE clauses. If you do, in fact, want all occurrences of matches for every condition (including duplicates), you must use UNION ALL and not WHERE.
#+END_QUOTE

*** Sorting Combined Query Results

SELECT statement output is sorted using the ORDER BY clause. When combining queries with a UNION only one ORDER BY clause may be used, and it must occur after the final SELECT statement. There is very little point in sorting part of a result set one way and part another way, *and so multiple ORDER BY clauses are not allowed*.

The following example sorts the results returned by the previously used UNION:

#+BEGIN_SRC sql :engine mysql :dbuser org :database grocer
select cust_name, cust_contact, cust_email
from Customers
where cust_state  in ("il", "in", "mi")
union all
select cust_name, cust_contact, cust_email
from Customers
where cust_name = "fun4all" order by cust_name, cust_contact;
#+END_SRC

#+RESULTS:
| cust_name     | cust_contact       | cust_email            |
|---------------+--------------------+-----------------------|
| Fun4All       | Denise L. Stephens | dstephens@fun4all.com |
| Fun4All       | Jim Jones          | jjones@fun4all.com    |
| Fun4All       | Jim Jones          | jjones@fun4all.com    |
| The Toy Store | Kim Howard         | NULL                  |
| Village Toys  | John Smith         | sales@villagetoys.com |

This UNION takes a single ORDER BY clause after the final SELECT statement. Even though the ORDER BY appears to only be a part of that last SELECT statement, the DBMS will in fact use it to sort all the results returned by all the SELECT statements.

#+BEGIN_QUOTE
  *Note: Other UNION Types*

  Some DBMSs support two additional types of UNION EXCEPT (sometimes called MINUS) can be used to only retrieve the rows that exist in the first table but not in the second, and INTERSECT can be used to retrieve only the rows that exist in both tables. In practice, however, these UNION types are rarely used as the same results can be accomplished using joins.
#+END_QUOTE

#+BEGIN_QUOTE
  *Tip: Working with Multiple Tables*

  For simplicity's sake, the examples in this lesson have all used UNION to combine multiple queries on the same table. In practice, where UNION is really useful is when you need to combine data from multiple tables, even tables with mismatched column names, in which case you can combine UNION with aliases to retrieve a single set of results.
#+END_QUOTE

** Summary

In this lesson, you learned how to combine SELECT statements with the UNION operator. Using UNION, you can return the results of multiple queries as one combined query, either including or excluding duplicates. The use of UNION can greatly simplify complex WHERE clauses and retrieving data from multiple tables.

alias没啥用.
# 总结,
这一章没有实质的内容, union便是or, intersection便是and
