* Lesson 1. Understanding SQL

In this lesson, you'll learn exactly what SQL is and what it will do for
you.

#+BEGIN_QUOTE
*Summary*

  database, container; table, file; column field datatype primary key;
  row record,
#+END_QUOTE
** Database Example
#+begin_src sql :engine mysql :dbuser org :database grocer
show databases;
#+end_src

#+RESULTS:
| Database           |
|--------------------|
| grocer             |
| information_schema |

#+begin_src sql :engine mysql :dbuser org :database grocer
show tables;
#+end_src

#+RESULTS:
| Tables_in_grocer |
|------------------|
| Customers        |
| OrderItems       |
| Orders           |
| Products         |
| Vendors          |

#+name: Vendors
#+begin_src sql :engine mysql :dbuser org :database grocer
select * from Vendors limit 3 offset 2;
#+end_src

#+RESULTS: Vendors
| vend_id | vend_name       | vend_address    | vend_city  | vend_state | vend_zip | vend_country |
|---------+-----------------+-----------------+------------+------------+----------+--------------|
| DLL01   | Doll House Inc. | 555 High Street | Dollsville | CA         |    99999 | USA          |
| FNG01   | Fun and Games   | 42 Galaxy Road  | London     | NULL       |  N16 6PS | England      |
| FRB01   | Furball Inc.    | 1000 5th Avenue | New York   | NY         |    11111 | USA          |

#+RESULTS:
| vend_id | vend_name       | vend_address    | vend_city  | vend_state | vend_zip | vend_country |
|---------+-----------------+-----------------+------------+------------+----------+--------------|
| BRE02   | Bear Emporium   | 500 Park Street | Anytown    | OH         |    44333 | USA          |
| BRS01   | Bears R Us      | 123 Main Street | Bear Town  | MI         |    44444 | USA          |
| DLL01   | Doll House Inc. | 555 High Street | Dollsville | CA         |    99999 | Usa          |
| FNG01   | Fun and Games   | 42 Galaxy Road  | London     | NULL       |  N16 6PS | England      |
| FRB01   | Furball Inc.    | 1000 5th Avenue | New York   | NY         |    11111 | USA          |
| JTS01   | Jouets et ours  | 1 Rue Amusement | Paris      | NULL       |    45678 | France       |

#+begin_src sql :engine mysql :dbuser org :database grocer
select * from Products;
#+End_src

#+RESULTS:
| prod_id | vend_id | prod_name           | prod_price | prod_desc                                                             |
|---------+---------+---------------------+------------+-----------------------------------------------------------------------|
| BNBG01  | DLL01   | Fish bean bag toy   |       3.49 | Fish bean bag toy, complete with bean bag worms with which to feed it |
| BNBG02  | DLL01   | Bird bean bag toy   |       3.49 | Bird bean bag toy, eggs are not included                              |
| BNBG03  | DLL01   | Rabbit bean bag toy |       3.49 | Rabbit bean bag toy, comes with bean bag carrots                      |
| BR01    | BRS01   | 8 inch teddy bear   |       5.99 | 8 inch teddy bear, comes with cap and jacket                          |
| BR02    | BRS01   | 12 inch teddy bear  |       8.99 | 12 inch teddy bear, comes with cap and jacket                         |
| BR03    | BRS01   | 18 inch teddy bear  |      11.99 | 18 inch teddy bear, comes with cap and jacket                         |
| RGAN01  | DLL01   | Raggedy Ann         |       4.99 | 18 inch Raggedy Ann doll                                              |
| RYL01   | FNG01   | King doll           |       9.49 | 12 inch king doll with royal garments and crown                       |
| RYL02   | FNG01   | Queen doll          |       9.49 | 12 inch queen doll with royal garments and crown                      |


#+begin_src sql :engine mysql :dbuser org :database grocer
select * from Customers;
#+end_src

#+RESULTS:
|    cust_id | cust_name     | cust_address         | cust_city | cust_state | cust_zip | cust_country | cust_contact       | cust_email            |
|------------+---------------+----------------------+-----------+------------+----------+--------------+--------------------+-----------------------|
| 1000000001 | Village Toys  | 200 Maple Lane       | Detroit   | MI         |    44444 | USA          | John Smith         | sales@villagetoys.com |
| 1000000002 | Kids Place    | 333 South Lake Drive | Columbus  | OH         |    43333 | USA          | Michelle Green     | NULL                  |
| 1000000003 | Fun4All       | 1 Sunny Place        | Muncie    | IN         |    42222 | USA          | Jim Jones          | jjones@fun4all.com    |
| 1000000004 | Fun4All       | 829 Riverside Drive  | Phoenix   | AZ         |    88888 | USA          | Denise L. Stephens | dstephens@fun4all.com |
| 1000000005 | The Toy Store | 4545 53rd Street     | Chicago   | IL         |    54545 | USA          | Kim Howard         | NULL                  |

#+begin_src sql :engine mysql :dbuser org :database grocer
select * from Orders;
#+end_src

#+RESULTS:
| order_num | order_date          |    cust_id |
|-----------+---------------------+------------|
|     20005 | 2012-05-01 00:00:00 | 1000000001 |
|     20006 | 2012-01-12 00:00:00 | 1000000003 |
|     20007 | 2012-01-30 00:00:00 | 1000000004 |
|     20008 | 2012-02-03 00:00:00 | 1000000005 |
|     20009 | 2012-02-08 00:00:00 | 1000000001 |

#+begin_src sql :engine mysql :dbuser org :database grocer
select * from OrderItems;
#+end_src

#+RESULTS:
| order_num | order_item | prod_id | quantity | item_price |
|-----------+------------+---------+----------+------------|
|     20005 |          1 | BR01    |      100 |       5.49 |
|     20005 |          2 | BR03    |      100 |      10.99 |
|     20006 |          1 | BR01    |       20 |       5.99 |
|     20006 |          2 | BR02    |       10 |       8.99 |
|     20006 |          3 | BR03    |       10 |      11.99 |
|     20007 |          1 | BR03    |       50 |      11.49 |
|     20007 |          2 | BNBG01  |      100 |       2.99 |
|     20007 |          3 | BNBG02  |      100 |       2.99 |
|     20007 |          4 | BNBG03  |      100 |       2.99 |
|     20007 |          5 | RGAN01  |       50 |       4.49 |
|     20008 |          1 | RGAN01  |        5 |       4.99 |
|     20008 |          2 | BR03    |        5 |      11.99 |
|     20008 |          3 | BNBG01  |       10 |       3.49 |
|     20008 |          4 | BNBG02  |       10 |       3.49 |
|     20008 |          5 | BNBG03  |       10 |       3.49 |
|     20009 |          1 | BNBG01  |      250 |       2.49 |
|     20009 |          2 | BNBG02  |      250 |       2.49 |
|     20009 |          3 | BNBG03  |      250 |       2.49 |

** Database Basics


The fact that you are reading a book on SQL *indicates* that you,
somehow, need to interact with databases. SQL is a language used to do
just this, *so before looking at SQL itself,* it is important that you
understand some basic concepts about databases and database
technologies.

Whether you are aware of it or not, you use databases all the time.

- Each time you select a name from your email address book, you are
  using a database.
- If you conduct a search on an Internet search site, you are using a
  database.
- When you log into your network at work, you are validating your name
  and password against a database.
- Even when you use your ATM card at a cash machine, you are using
  databases for PIN number verification and balance checking.

*But even though* we all use databases all the time, *there remains*
much confusion over what exactly a database is. This is especially true
because different people use the same database terms to mean different
things. Therefore, *a good place to start our study* is with a list and
explanation of the most important database terms.

#+BEGIN_QUOTE
  *Tip: Reviewing Basic Concepts*

  What follows is a very brief overview of some basic database concepts.
  It is intended to either *jolt* your memory if you already have some
  database experience, or to provide you with the absolute basics, if
  you are new to databases. Understanding databases is an important part
  of mastering SQL, and you might want to find a good book on database
  fundamentals to *brush up* on the subject if needed.
#+END_QUOTE

*** Databases
    :PROPERTIES:
    :CUSTOM_ID: databases
    :END:

The term database is used in many different ways, but for our purposes
(and indeed, from SQL's perspective) a database is a collection of data
stored in some organized fashion. The simplest way to think of it is to
imagine a database as a filing cabinet. The filing cabinet is simply a
physical location to store data, regardless of what that data is or how
it is organized.

#+BEGIN_QUOTE
  *Database*

  A container (usually a file or set of files) to store organized data.

  *Caution: Misuse Causes Confusion*

  People often use the term database to refer to the database software
  *they are running.* This is incorrect, and it is *a source of much
  confusion.* Database software is actually called the Database
  Management System (or DBMS). The database is the *container* created
  and manipulated via the DBMS, and exactly what the database is and
  what form it takes varies from one database to the next.
#+END_QUOTE

*** Tables
    :PROPERTIES:
    :CUSTOM_ID: tables
    :END:

When you store information in your filing cabinet, you don't just toss
it in a drawer. Rather, you create files within the filing cabinet, and
then you file related data in specific files.

In the database world, *that file is called a table.* A table is a
structured file that can store data of a specific type. A table might
contain a list of customers, a product catalog, or any other list of
information.

#+BEGIN_QUOTE
  *Table* is a file

  A structured list of data of a specific type.
#+END_QUOTE

The key here is that the data stored in the table is *one type of data
or one list.* You would never store a list of customers and a list of
orders in the same database table. Doing so would make subsequent
retrieval and access difficult. Rather, you'd create two tables, one for
each list.

*Every table in a database has a name that identifies it.* That name is
always unique--- meaning no other table in that database can have the
same name.

#+BEGIN_QUOTE
  *Note: Table Names*

  What makes a table name unique is actually a combination of several
  things including the database name and table name. Some databases also
  use the name of the database owner as part of the unique name. This
  means that while you cannot use the same table name twice in the same
  database, you definitely can reuse table names in different databases.
#+END_QUOTE

Tables have characteristics and properties that define how data is
stored in them. These include information about what data may be stored,
how it is broken up, how individual pieces of information are named, and
much more. *This set of information that describes a table is known as a
schema,* and schemas are used to describe specific tables within a
database, as well as entire databases (and the relationship between
tables in them, if any).

#+BEGIN_QUOTE
  *Schema*

  Information about database and table layout and properties.
#+END_QUOTE

*** Columns and Datatypes Field
    :PROPERTIES:
    :CUSTOM_ID: columns-and-datatypes-field
    :END:

Tables are *made up* of columns. A column contains a particular piece of
information within a table.

#+BEGIN_QUOTE
  *Column*

  A single field in a table. All tables are made up of one or more
  columns.
#+END_QUOTE

The best way to understand this is to *envision* database tables as
grids, somewhat like spreadsheets. Each column in the grid contains a
particular piece of information. In a customer table, for example, one
column contains the customer number, another contains the customer name,
and the address, city, state, and ZIP code are all stored in their own
columns.

#+BEGIN_QUOTE
  *Tip: Breaking Up Data*

  It is extremely important to *break data into multiple columns
  correctly*. For example, city, state, and ZIP code should always be
  separate columns. By breaking these out, it becomes possible to sort
  or filter data by specific columns (for example, to find all customers
  in a particular state or in a particular city). If city and state are
  combined into one column, it would be extremely difficult to *sort or
  filter* by state.

  When you break up data, the level of granularity is up to you and your
  specific requirements. For example, addresses are typically stored
  with the house number and street name together. This is fine, unless
  you might one day need to sort data by street name, in which case
  splitting house number and street name would be preferable.
#+END_QUOTE

Each column in a database has an associated datatype. A datatype defines
what type of data the column can contain. For example, if the column
were to contain a number(perhaps the number of items in an order), the
datatype would be a numeric datatype. If the column were to contain
dates, text, notes, currency amounts, and so on, the appropriate
datatype would be used to specify this.

#+BEGIN_QUOTE
  *Datatype*

  A type of allowed data. Every table column has an *associated
  datatype* that restricts (or allows) specific data in that column.
#+END_QUOTE

Datatypes restrict the type of data that can be stored in a column (for
example, *preventing the entry of alphabetical characters into a numeric
field*). Datatypes also help sort data correctly and play an important
role in optimizing *disk usage*. As such, special attention must be
given to picking the right datatype when tables are created.

#+BEGIN_QUOTE
  *Caution: Datatype Compatibility*

  Datatypes and their names are one of the primary sources of SQL
  *incompatibility.* While most basic datatypes are supported
  consistently, many more advanced datatypes are not. And worse,
  occasionally you'll find that the same datatype is referred to by
  different names in different DBMSs. There is not much you can do about
  this, but it is important to keep in mind when you create *table
  schemas*.
#+END_QUOTE

*** Rows record
    :PROPERTIES:
    :CUSTOM_ID: rows-record
    :END:

Data in a table is stored in rows; each record saved is stored in its
own row. Again, envisioning a table as a spreadsheet style grid, the
vertical columns in the grid are the table columns, and the horizontal
rows are the table rows.

For example, a customers table might store one customer per row. The
number of rows in the table is the number of records in it.

#+BEGIN_QUOTE
  *Rows*

  A record in a table.

  *Note: Records or Rows?*

  You may hear users refer to database records when referring to rows.
  For the most part the two terms are used interchangeably, but row is
  technically the correct term.
#+END_QUOTE

*** Primary Keys
    :PROPERTIES:
    :CUSTOM_ID: primary-keys
    :END:

Every row in a table should have some column (or set of columns) that
uniquely identifies it. A table containing customers might use a
customer number column for this purpose, *whereas* a table containing
orders might use the order ID. An employee list table might use an
employee ID or the employee Social Security number column.

#+BEGIN_QUOTE
  *Primary key*

  A column (or set of columns) whose values uniquely identify every row
  in a table.
#+END_QUOTE

This column (or set of columns) that *uniquely identifies* each row in a
table is called a primary key. The primary key is used to refer to a
specific row. Without a primary key, updating or deleting specific rows
in a table becomes extremely difficult as there is *no guaranteed safe
wa*y to refer to just the rows to be affected.

#+BEGIN_QUOTE
  *Tip: Always Define Primary Keys*

  Although primary keys are not actually required, most database
  designers ensure that every table they create has a primary key so
  that future data manipulation is possible and manageable.
#+END_QUOTE

Any column in a table can be established as the primary key, as long as
it meets the following conditions:

- No two rows can have the same primary key value.
- Every row must have a primary key value. (Primary key columns may not
  allow NULL values.)
- Values in primary key columns should never be modified or updated.
- Primary key values should *never be reused.* (If a row is deleted from
  the table, its primary key may not be assigned to any new rows in the
  future.)

#+BEGIN_QUOTE
  这四条总结得棒.
#+END_QUOTE

Primary keys are usually defined on a single column within a table. But
this is not required, and multiple columns may be used together *as a
primary key.* When multiple columns are used, the rules listed above
must apply to all columns, and the values of all columns together must
be unique (individual columns need not have unique values).

There is another very important type of key called a foreign key, but
I'll get to that later on in Lesson 12, "Joining Tables."

** What Is SQL?
   :PROPERTIES:
   :CUSTOM_ID: what-is-sql
   :END:

SQL (pronounced as the letters S-Q-L or as sequel) is an abbreviation
for Structured Query Language. SQL is a language designed specifically
for *communicating with databases.*

Unlike other languages (spoken languages like English, or programming
languages like Java, C, or PHP), SQL is made up of very few words. This
is deliberate. SQL is designed to do one thing and do it well---provide
you with a simple and efficient way to read and write data from a
database.

*What are the advantages of SQL?*

- SQL is not a *proprietary* language used by specific database
  *vendors*. Almost every major DBMS supports SQL, so learning this one
  language will enable you to interact with just about every database
  you'll run into.
- SQL is easy to learn. The statements are all made up of descriptive
  English words, and there aren't that many of them.
- Despite its apparent simplicity, SQL is actually a very powerful
  language, and by *cleverly using its language elements you can perform
  very complex and sophisticated database operations.*

And with that, let's learn SQL.

#+BEGIN_QUOTE
  *Note: SQL Extensions*

  Many DBMS vendors have extended their support for SQL by adding
  statements or instructions to the language. The purpose of these
  extensions is to provide additional functionality or simplified ways
  to perform specific operations. And while often extremely useful,
  these extensions tend to be very DBMS specific, and they are rarely
  supported by more than a single vendor.

  Standard SQL is governed by the ANSI standards committee, and is thus
  called ANSI SQL. All major DBMSs, even those with their own
  extensions, support ANSI SQL. Individual implementations have their
  own names (PL-SQL, Transact-SQL, and so forth).

  For the most part, the SQL taught in this book is ANSI SQL. On the odd
  occasion where DBMS specific SQL is used it is so noted.
#+END_QUOTE

** Try It Yourself
   :PROPERTIES:
   :CUSTOM_ID: try-it-yourself
   :END:

Like any language, the best way to learn SQL is to try it for yourself.
To do this you'll need a database and an application with which to test
your SQL statements.

All of the lessons in this book use real SQL statements and real
database tables. Appendix A, "The Example Tables," explains what the
example tables are, and provides details on how to obtain (or create)
them so that you may follow along with the instructions in each lesson.
Appendix B, "Working in Popular Applications," describes the steps
needed to execute your SQL in a variety of applications. Before
*proceeding to* the next lesson, I'd strongly suggest that you turn to
these two appendixes so that you'll be ready to follow along.

** Summary
   :PROPERTIES:
   :CUSTOM_ID: summary
   :END:

In this first lesson, you learned what SQL is and why it is useful.
Because SQL is used to interact with databases, you also reviewed some
basic database terminology.

*granularity* /ˈɡræn.jəˈlær.ə.ti

1. 助记, grain, hard small seed

2. 词源,

   1790, from Late Latin granulum "granule, a little grain," diminutive
   of Latin granum "grain, seed" (from PIE
   root [[https://www.etymonline.com/word/*gre-no-?ref=etymonline_crossreference][*gre-no-]] "grain")
   + [[https://www.etymonline.com/word/-ar?ref=etymonline_crossreference][-ar]].
   Replaced granulous (late 14c.). Related: Granularity.

3. 释义,

   the quality of including a lot of small details.

   The [[https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/marketing][marketing]] [[https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/analysis][analysis]] [[https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/offer][offers]] a
   high [[https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/level][level]] of
   granularity.
** Convert to org
#+begin_src ipython :session sql :results output
import glob
import subprocess

mds = glob.glob("*.md")
mds.remove("README.md")
for md in mds:

    cmd = f"pandoc --wrap=none {md} -o {md.replace('.md', '.org')}"
    print(cmd)
    subprocess.run(cmd, shell=True)
#+end_src

#+RESULTS:
#+begin_example
pandoc --wrap=none Lesson 7. Creating Calculated Fields.md -o Lesson 7. Creating Calculated Fields.org
pandoc --wrap=none Lesson 1. Understanding SQL.md -o Lesson 1. Understanding SQL.org
pandoc --wrap=none Lesson 16. Updating and Deleting Data.md -o Lesson 16. Updating and Deleting Data.org
pandoc --wrap=none Lesson 21. Using Cursors.md -o Lesson 21. Using Cursors.org
pandoc --wrap=none Lesson 20. Managing Transaction Processing.md -o Lesson 20. Managing Transaction Processing.org
pandoc --wrap=none Lesson 6. Using Wildcard Filtering.md -o Lesson 6. Using Wildcard Filtering.org
pandoc --wrap=none Lesson 22. Understanding Advanced SQL Features.md -o Lesson 22. Understanding Advanced SQL Features.org
pandoc --wrap=none Lesson 18. Using Views.md -o Lesson 18. Using Views.org
pandoc --wrap=none Lesson 12. Joining Tables.md -o Lesson 12. Joining Tables.org
pandoc --wrap=none Lesson 5. Advanced Data Filtering.md -o Lesson 5. Advanced Data Filtering.org
pandoc --wrap=none Lesson 13. Creating Advanced Joins.md -o Lesson 13. Creating Advanced Joins.org
pandoc --wrap=none Lesson 10. Grouping Data.md -o Lesson 10. Grouping Data.org
pandoc --wrap=none Lesson 19. Working with Stored Procedures.md -o Lesson 19. Working with Stored Procedures.org
pandoc --wrap=none Lesson 8. Using Data Manipulation Functions.md -o Lesson 8. Using Data Manipulation Functions.org
pandoc --wrap=none Lesson 14. Combining Queries.md -o Lesson 14. Combining Queries.org
pandoc --wrap=none Lesson 3. Sorting Retrieved Data.md -o Lesson 3. Sorting Retrieved Data.org
pandoc --wrap=none Lesson 2 Retrieving Data.md -o Lesson 2 Retrieving Data.org
pandoc --wrap=none Lesson 4. Filtering Data.md -o Lesson 4. Filtering Data.org
pandoc --wrap=none Lesson 17. Creating and Manipulating Tables.md -o Lesson 17. Creating and Manipulating Tables.org
pandoc --wrap=none Lesson 9. Summarizing Data.md -o Lesson 9. Summarizing Data.org
pandoc --wrap=none Lesson 15. Inserting Data.md -o Lesson 15. Inserting Data.org
pandoc --wrap=none Z.Appendix 1.md -o Z.Appendix 1.org
pandoc --wrap=none Lesson 11. Working with Subqueries.md -o Lesson 11. Working with Subqueries.org
 create.txt
'Lesson 10. Grouping Data.md'
'Lesson 11. Working with Subqueries.md'
'Lesson 12. Joining Tables.md'
'Lesson 13. Creating Advanced Joins.md'
'Lesson 14. Combining Queries.md'
'Lesson 15. Inserting Data.md'
'Lesson 16. Updating and Deleting Data.md'
'Lesson 17. Creating and Manipulating Tables.md'
'Lesson 18. Using Views.md'
'Lesson 19. Working with Stored Procedures.md'
'Lesson 1. Understanding SQL.md'
'Lesson 1. Understanding SQL.org'
'Lesson 20. Managing Transaction Processing.md'
'Lesson 21. Using Cursors.md'
'Lesson 22. Understanding Advanced SQL Features.md'
'Lesson 2 Retrieving Data.md'
'Lesson 3. Sorting Retrieved Data.md'
'Lesson 4. Filtering Data.md'
'Lesson 5. Advanced Data Filtering.md'
'Lesson 6. Using Wildcard Filtering.md'
'Lesson 7. Creating Calculated Fields.md'
'Lesson 8. Using Data Manipulation Functions.md'
'Lesson 9. Summarizing Data.md'
 LICENSE
 populate.txt
 README.md
 README.pdf
'Z.Appendix 1.md'
#+end_example

#+begin_src ipython :session sql :results output
! ls
! pandoc --wrap=none 'Lesson 22. Understanding Advanced SQL Features.md' -o '22.Understanding-Advanced-SQL-Features.org'

#+end_src

#+RESULTS:
#+begin_example
'03.Sorting Retrieved Data.org'
 04.Filtering-Data.org
 05.Advanced-Data-Filtering.org
 06.Using-Wildcard-Filtering.org
 07.Creating-Calculated-Fields.org
 08.Using-Data-Manipulation-Functions.org
 09.Summarizing-Data.org
 10.Grouping-Data.org
 11.Working-with-Subqueries.org
 12.Joining-Tables.org
 13.Creating-Advanced-Joins.org
 14.Combining-Queries.org
 15.Inserting-Data.org
 16.Updating-and-Deleting-Data.org
 17.Creating-and-Manipulating-Tables.org
 17.Creating-and-Manipulating-Tables.org_archive
 18.Using-Views.org
 19.Working-Stored-Procedures.org
 20.Managing-Transaction-Processing.org
 21.Using-Cursors.org
 create.txt
'Lesson 10. Grouping Data.md'
'Lesson 11. Working with Subqueries.md'
'Lesson 12. Joining Tables.md'
'Lesson 13. Creating Advanced Joins.md'
'Lesson 14. Combining Queries.md'
'Lesson 15. Inserting Data.md'
'Lesson 16. Updating and Deleting Data.md'
'Lesson 17. Creating and Manipulating Tables.md'
'Lesson 18. Using Views.md'
'Lesson 19. Working with Stored Procedures.md'
'Lesson 1. Understanding SQL.md'
'Lesson 1. Understanding SQL.org'
'Lesson 20. Managing Transaction Processing.md'
'Lesson 21. Using Cursors.md'
'Lesson 22. Understanding Advanced SQL Features.md'
'Lesson 2 Retrieving Data.md'
'Lesson 3. Sorting Retrieved Data.md'
'Lesson 4. Filtering Data.md'
'Lesson 5. Advanced Data Filtering.md'
'Lesson 6. Using Wildcard Filtering.md'
'Lesson 7. Creating Calculated Fields.md'
'Lesson 8. Using Data Manipulation Functions.md'
'Lesson 9. Summarizing Data.md'
 LICENSE
 populate.txt
 README.md
 README.pdf
'Z.Appendix 1.md'
#+end_example


#+begin_src ipython :session mysql :results output
! rm *.md

#+end_src

#+RESULTS:
